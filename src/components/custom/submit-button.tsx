"use client";

import { useFormStatus } from "react-dom";
import { useState, ReactNode } from "react";

// –û–≥–æ–ª–æ—à—É—î–º–æ `grecaptcha` –≥–ª–æ–±–∞–ª—å–Ω–æ
declare global {
  interface Window {
    grecaptcha?: {
      ready: (callback: () => void) => void;
      execute: (siteKey: string, options: { action: string }) => Promise<string>;
    };
  }
}

interface SubmitButtonProps {
  pendingText?: string;
  className?: string;
  children: ReactNode;
  disabled?: boolean;
  onBeforeSubmit?: (recaptchaToken: string, formData: FormData) => Promise<void>; // –î–æ–¥–∞—î–º–æ formData —É callback
}

export default function SubmitButton({
  pendingText = "–ù–∞–¥—Å–∏–ª–∞–Ω–Ω—è...",
  className = "",
  children,
  disabled = false,
  onBeforeSubmit,
}: SubmitButtonProps) {
  const { pending } = useFormStatus();
  const [loading, setLoading] = useState(false);

  const siteKey = process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY; // –ü—É–±–ª—ñ—á–Ω–∏–π –∫–ª—é—á

  const loadRecaptcha = () => {
    if (typeof window === "undefined" || window.grecaptcha) return;

    const script = document.createElement("script");
    script.src = `https://www.google.com/recaptcha/api.js?render=${siteKey}`;
    script.async = true;
    script.defer = true;
    script.onload = () => {
      console.log("reCAPTCHA –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ");
    };
    document.body.appendChild(script);
  };

  const handleClick = async (event: React.MouseEvent<HTMLButtonElement>) => {
    if (!onBeforeSubmit || pending || disabled) return;

    event.preventDefault();
    setLoading(true);

    if (!siteKey) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞: NEXT_PUBLIC_RECAPTCHA_SITE_KEY –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –≤ .env");
      alert("–ü–æ–º–∏–ª–∫–∞ –∫–æ–Ω—Ñ—ñ–≥—É—Ä–∞—Ü—ñ—ó reCAPTCHA. –ó–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.");
      setLoading(false);
      return;
    }

    if (typeof window === "undefined" || !window.grecaptcha) {
      alert("–ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è reCAPTCHA, —Å–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
      setLoading(false);
      return;
    }

    try {
      await new Promise<void>((resolve) => {
        window.grecaptcha!.ready(resolve);
      });

      const token = await window.grecaptcha!.execute(siteKey, { action: "submit" });
      console.log("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–∏–π reCAPTCHA —Ç–æ–∫–µ–Ω:", token);
      
      // –û—Ç—Ä–∏–º—É—î–º–æ formData –∑ —Ñ–æ—Ä–º–∏
      const form = document.getElementById("price-form") as HTMLFormElement;
      if (!form) {
        console.error("‚ùå –§–æ—Ä–º–∞ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!");
        setLoading(false);
        return;
      }

      const formData = new FormData(form);
      formData.append("recaptcha", token); // –î–æ–¥–∞—î–º–æ reCAPTCHA —Ç–æ–∫–µ–Ω

      console.log("üì© –î–∞–Ω—ñ, —â–æ –Ω–∞–¥—Å–∏–ª–∞—é—Ç—å—Å—è —É Strapi:", Object.fromEntries(formData.entries()));

      await onBeforeSubmit(token, formData); // –ü–µ—Ä–µ–¥–∞—î–º–æ formData —É —Å–∞–±–º—ñ—Ç
    } catch (error) {
      console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ reCAPTCHA:", error);
      alert("–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è reCAPTCHA. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <button
      type="submit"
      disabled={pending || disabled || loading}
      onMouseEnter={loadRecaptcha}
      onClick={handleClick}
      className={`${className} ${pending || disabled || loading ? "opacity-50 cursor-not-allowed" : ""}`}
    >
      {pending || loading ? pendingText : children}
    </button>
  );
};
